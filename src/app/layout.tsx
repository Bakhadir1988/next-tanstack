import { dehydrate } from '@tanstack/react-query';
import { ThemeProvider } from 'next-themes';
import localFont from 'next/font/local';
import { cookies } from 'next/headers';

import { ProductType } from '@/entities/product/model/product.type';
import { catalogApi } from '@/shared/api/catalog.api';
import {
  cartApi,
  compareApi,
  favoritesApi,
  ListResponse,
} from '@/shared/api/list.api';
import getQueryClient from '@/shared/lib/get-query-client';
import { Header } from '@/widgets/header/header';

import { Providers } from './providers';

import type { Metadata } from 'next';

import '../shared/styles/index.scss';

const roboto = localFont({
  src: [
    {
      path: '../shared/assets/fonts/Roboto-Regular.woff2',
      weight: '400',
      style: 'normal',
    },
    {
      path: '../shared/assets/fonts/Roboto-Medium.woff2',
      weight: '500',
      style: 'normal',
    },
    {
      path: '../shared/assets/fonts/Roboto-Bold.woff2',
      weight: '700',
      style: 'normal',
    },
  ],
  variable: '--font-roboto',
  display: 'swap',
  preload: true,
});

export const metadata: Metadata = {
  title: 'Create Next App',
  description: 'Generated by create next app',
};

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const cookieStore = await cookies();
  const sessionId = cookieStore.get('session_id')?.value;
  const queryClient = getQueryClient();

  if (sessionId) {
    await Promise.all([
      queryClient.prefetchQuery({
        queryKey: ['favorites', sessionId],
        queryFn: () => favoritesApi.get(sessionId),
      }),
      queryClient.prefetchQuery({
        queryKey: ['compare', sessionId],
        queryFn: () => compareApi.get(sessionId),
      }),
      queryClient.prefetchQuery({
        queryKey: ['cart', sessionId],
        queryFn: () => cartApi.get(sessionId),
      }),
    ]);

    const compareData = queryClient.getQueryData<ListResponse>([
      'compare',
      sessionId,
    ]);

    if (compareData && compareData.items) {
      const products: ProductType[] = (compareData.items ?? []).map((item) => ({
        ...item.data,
        url: item.url,
        sect_id: item.sect_id,
      }));

      const sectionIds = [
        ...new Set(products.map((p) => p.sect_id).filter(Boolean)),
      ] as string[];

      await Promise.all(
        sectionIds.map((id) =>
          queryClient.prefetchQuery({
            queryKey: ['section', id],
            queryFn: () => catalogApi.getSection(id),
          }),
        ),
      );
    }
  }
  const dehydratedState = dehydrate(queryClient);

  return (
    <html lang="en" className={roboto.variable} suppressHydrationWarning>
      <body className={roboto.className}>
        <ThemeProvider attribute="class" defaultTheme="system" enableSystem>
          <Providers
            sessionId={sessionId ?? ''}
            dehydratedState={dehydratedState}
          >
            <Header />
            <main>{children}</main>
          </Providers>
        </ThemeProvider>
      </body>
    </html>
  );
}
